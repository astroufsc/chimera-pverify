#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

# chimera - observatory automation system
# Copyright (C) 2006-2007  P. Henrique Silva <henrique@astro.ufsc.br>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


from chimera.core.cli import ChimeraCLI, action, parameter
from chimera.core.callback import callback
from chimera.core.exceptions import ChimeraException
from chimera.interfaces.pointverify import CantPointScopeException, CanSetScopeButNotThisField, CantSetScopeException, PointVerify
from chimera.util.sextractor import SExtractorException

from chimera.util.ds9 import DS9

import sys
import time    
import os

class ChimeraPointVerify (ChimeraCLI):
    
    def __init__ (self):
	# are these entities being created or am I referring to existing things?
        # the first entry is how the script will be called
        # the second entry is an English language description of the script
        ChimeraCLI.__init__(self, "chimera-pverify", "Point Verifier", 0.1)
        self.addHelpGroup("PVERIFY", "PVerify")
        self.addController(name="pverify", cls="PointVerify", required=True, helpGroup="PVERIFY", help="Pointing verification controller to be used")
	# add here :
	# do point verification @ (stuff passed to the telescope)
	# --slew --object m7
	# exposure time, filter (stuff passed to the camera)
	# --exptime 10 --filter V
        # self.addParameters(dict(name="autofocus_step", long="step", type="int", helpGroup="AUTOFOCUS",
        #                         help="Defines autofocus step.", metavar="STEP", default=500),
        #                    dict(name="autofocus_exptime", long="exptime", type="float", helpGroup="AUTOFOCUS",
        #                         help="Defines autofocus frame exposure time.", metavar="EXPTIME", default=10.0),
        #                    dict(name="autofocus_debug", long="debug", helpGroup="AUTOFOCUS",
        #                         help="Run an autofocus debug session using data from PREVIOUS_RUN_DIR.",
        #                         metavar="PREVIOUS_RUN_DIR", default=""))

	# another help group?  
        # yes, 
        self.addHelpGroup("COMMANDS", "Commands")        

    # used to validate the range parameters
    # @parameter(long="range", helpGroup="AUTOFOCUS", default="1000-6000",
    #           help="Defines autofocus focuser range to be covered. Use start-end, "
    #           "as in 1000-6000 to run from 1000 to 6000.", metavar="START-END")
    #def autofocus_range(self, value):
    #    try:
    #        start, end = value.split("-")
    #        start = int(start)
    #        end = int(start)
    #        return (start, end)
    #    except ValueError:
    #        raise ValueError("Invalid start-end range")


    # ok, looks like action establishes that the following method is some 
    # action performed by this script    
    @action(long="choose", 
            help="Chooses a field to point the scope to, moves the scope, takes an image and verifies the pointing", 
           helpGroup="PVERIFY")
    def checkPointing (self,options):
        self.out("Choosing a field in the sky, moving scope and taking images")
        try:
            self.pverify.checkPointing()
	# what is this e for ???
        except CantSetScopeException, e:
            self.exit("Can't set scope")
        self.out("OK")

    @action(long="here",
            help="Takes an image where telescope is pointed to, tries to find image RA, DEC, and tries to rececnter the telescope",
            helpGroup="PVERIFY")
    def checkHere(self,options):
        self.out("Centering scope on current field")
        try:
            self.pverify.pointVerify()
        except CanSetScopeButNotThisField, e:
            self.out("The scope has been set on a standard field but it is impossible to set on this - either spotty clouds or too faint stars")
        self.out("OK")		
        

    #def _currentPosition(self, options):
    #    return self.out("Current telescope position: %s" % self.focuser.getPosition())
    

def main():
    cli = ChimeraPointVerify()
    return cli.run(sys.argv)
    
if __name__ == '__main__':
    main()
